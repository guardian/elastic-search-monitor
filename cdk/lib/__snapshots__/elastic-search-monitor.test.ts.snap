// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ElasticSearchMonitor stack matches the snapshot 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Monitors your elastic search cluster and reports metrics to cloudwatch",
  "Parameters": Object {
    "App": Object {
      "Default": "elastic-search-monitor",
      "Description": "Application name",
      "Type": "String",
    },
    "ClusterName": Object {
      "Description": "Cluster name to use in the cloudwatch metrics",
      "Type": "String",
    },
    "ClusterSecurityGroup": Object {
      "Description": "A security group allowing the lambda to connect to port 9200 over TCP",
      "Type": "AWS::EC2::SecurityGroup::Id",
    },
    "DeployBucket": Object {
      "Default": "deploy-tools-dist",
      "Description": "Bucket where RiffRaff uploads artifacts on deploy",
      "Type": "String",
    },
    "Stack": Object {
      "Default": "deploy",
      "Description": "Stack name",
      "Type": "String",
    },
    "Stage": Object {
      "AllowedValues": Array [
        "CODE",
        "PROD",
      ],
      "Default": "CODE",
      "Description": "Stage name",
      "Type": "String",
    },
    "Subnets": Object {
      "Description": "Subnets (within your VPC)",
      "Type": "List<AWS::EC2::Subnet::Id>",
    },
    "TagQueryApp": Object {
      "Description": "Application name of the cluster master node",
      "Type": "String",
    },
    "TagQueryStack": Object {
      "Description": "Stack name of the cluster master node",
      "Type": "String",
    },
    "VpcId": Object {
      "Description": "Vpc id (same VPC as your ELK stack)",
      "Type": "AWS::EC2::VPC::Id",
    },
  },
  "Resources": Object {
    "DailyEvent": Object {
      "Properties": Object {
        "Description": "Event sent to process the previous day of data",
        "ScheduleExpression": "rate(1 minute)",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": "Lambda.Arn",
            },
            "Id": "Lambda",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DailyEventLambdaPermission": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": "Lambda.Arn",
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": "DailyEvent.Arn",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ExecutionRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
        },
        "Path": "/",
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Object {
                "Action": Array [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:logs:*:*:*",
              },
            },
            "PolicyName": "logs",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Object {
                "Action": Array [
                  "lambda:InvokeFunction",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
            },
            "PolicyName": "lambda",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Object {
                "Action": Array [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
            },
            "PolicyName": "vpc",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Object {
                "Action": Array [
                  "ec2:DescribeInstances",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
            },
            "PolicyName": "ec2-detection",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Object {
                "Action": Array [
                  "cloudwatch:PutMetricData",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
            },
            "PolicyName": "cloudwatch",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          Object {
            "Key": "gu:repo",
            "Value": "guardian/elastic-search-monitor",
          },
          Object {
            "Key": "Stack",
            "Value": "deploy",
          },
          Object {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Lambda": Object {
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "DeployBucket",
          },
          "S3Key": Object {
            "Fn::Sub": "\${Stack}/\${Stage}/\${App}/\${App}.jar",
          },
        },
        "Description": "Monitors your elastic search cluster and reports metrics to cloudwatch",
        "Environment": Object {
          "Variables": Object {
            "App": Object {
              "Ref": "App",
            },
            "ClusterName": Object {
              "Ref": "ClusterName",
            },
            "Stack": Object {
              "Ref": "Stack",
            },
            "Stage": Object {
              "Ref": "Stage",
            },
            "TagQueryApp": Object {
              "Ref": "TagQueryApp",
            },
            "TagQueryStack": Object {
              "Ref": "TagQueryStack",
            },
          },
        },
        "FunctionName": Object {
          "Fn::Sub": "\${App}-\${Stage}",
        },
        "Handler": "com.gu.elasticsearchmonitor.Lambda::handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": "ExecutionRole.Arn",
        },
        "Runtime": "java8",
        "Tags": Array [
          Object {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          Object {
            "Key": "gu:repo",
            "Value": "guardian/elastic-search-monitor",
          },
          Object {
            "Key": "Stack",
            "Value": "deploy",
          },
          Object {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 60,
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Ref": "ClusterSecurityGroup",
            },
          ],
          "SubnetIds": Object {
            "Ref": "Subnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
  },
}
`;
